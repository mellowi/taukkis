// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define([], function() {
    var Filter;
    return Filter = (function(_super) {

      __extends(Filter, _super);

      function Filter() {
        return Filter.__super__.constructor.apply(this, arguments);
      }

      Filter.prototype.id = "filter";

      Filter.prototype.addCategoryOut = function(category) {
        var categoriesOut, index;
        categoriesOut = this.get("categoriesOut");
        index = $.inArray(category, categoriesOut);
        if (index === -1) {
          return categoriesOut.push(category);
        } else {
          return categoriesOut.splice(index, 1);
        }
      };

      Filter.prototype.fetch = function(options) {
        var data, json;
        json = localStorage.getItem(this.id);
        if (json) {
          data = JSON.parse(json);
          return this.set(data);
        } else {
          return this.set({
            categoriesOut: []
          });
        }
      };

      Filter.prototype.save = function(attributes, options) {
        return localStorage.setItem(this.id, JSON.stringify(this.attributes));
      };

      Filter.prototype.destroy = function() {
        return localStorage.removeItem(this.id);
      };

      return Filter;

    })(Backbone.Model);
  });

}).call(this);
