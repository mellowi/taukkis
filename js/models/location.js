// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  define(["models/route"], function(Route) {
    var Location;
    return Location = (function(_super) {

      __extends(Location, _super);

      function Location() {
        return Location.__super__.constructor.apply(this, arguments);
      }

      Location.prototype.id = "location";

      Location.prototype.initialize = function() {
        return this.update();
      };

      Location.prototype.update = function() {
        if (utils.currentLocation !== null) {
          this.setDistance(this.calculateDistance());
          return this.setTime(this.calculateTime());
        }
      };

      Location.prototype.calculateDistance = function() {
        var R, a, c, dLat, dLon, lat1, lat2, lon1, lon2;
        R = 6371;
        lon1 = utils.currentLocation.lon;
        lat1 = utils.currentLocation.lat;
        lon2 = this.attributes.lon;
        lat2 = this.attributes.lat;
        dLat = (lat2 - lat1).toRad();
        dLon = (lon2 - lon1).toRad();
        lat1 = lat1.toRad();
        lat2 = lat2.toRad();
        a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.sin(dLon / 2) * Math.sin(dLon / 2) * Math.cos(lat1) * Math.cos(lat2);
        c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
        return R * c;
      };

      Location.prototype.calculateTime = function() {
        var lolfactor;
        lolfactor = 1.15;
        return this.get("distance") * 1000 / utils.route.get("averageSpeed") * lolfactor;
      };

      Location.prototype.setDistance = function(distance) {
        return this.set({
          distance: distance
        });
      };

      Location.prototype.setTime = function(time) {
        return this.set({
          time: time
        });
      };

      return Location;

    })(Backbone.Model);
  });

}).call(this);
