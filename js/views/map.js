// Generated by CoffeeScript 1.3.3
(function() {

  define(["models/map"], function(Map) {
    return Backbone.View.extend({
      events: {
        "click #plus": "zoomIn",
        "click #minus": "zoomOut",
        "click #up": "moveUp",
        "click #down": "moveDown",
        "click #left": "moveLeft",
        "click #right": "moveRight",
        "orientationchange resize pageshow": "updateMap",
        "tap .category-filter": "categories"
      },
      mapElement: "map",
      routeLayer: null,
      poiLayer: null,
      updateMap: function(width, height) {
        this.setSize(width, height);
        this.setMap();
        return this.initLayers();
      },
      categories: function(e) {
        utils.setCategory(e);
        return this.render("poi");
      },
      setMap: function() {
        if (this.mapElement === "map") {
          if (utils.map === null) {
            return utils.map = new Map(this.mapElement);
          } else {
            return utils.map.instance.updateSize();
          }
        } else {
          return utils.detailMap = new Map(this.mapElement);
        }
      },
      initLayers: function() {
        var selectControl;
        if (this.routeLayer && this.mapElement === "map") {
          utils.map.instance.removeLayer(this.routeLayer);
        }
        this.routeLayer = new OpenLayers.Layer.Vector("Route");
        this.addLayer(this.routeLayer);
        if (this.poiLayer && this.mapElement === "map") {
          utils.map.instance.removeLayer(this.poiLayer);
        }
        this.poiLayer = new OpenLayers.Layer.Vector("POIs", {
          styleMap: utils.poiStyleMap
        });
        this.addLayer(this.poiLayer);
        if (this.mapElement === "map") {
          selectControl = new OpenLayers.Control.SelectFeature(this.poiLayer, {
            id: 'poi-select-control',
            onSelect: this.showPOIDetails
          });
          utils.map.instance.addControl(selectControl);
          selectControl.activate();
        }
        return this.addLayer(utils.geoLocateLayer);
      },
      showPOIDetails: function(poi) {
        poi = poi.attributes;
        if (!_.isUndefined(poi.id)) {
          utils.app.navigate("#detail?id=" + poi.id, true);
        }
      },
      showRoute: function(routeFeature) {
        return this.routeLayer.addFeatures([routeFeature]);
      },
      renderRoute: function(zoomToRoute) {
        var point, position, routeFeature, waypoints, _i, _len, _ref;
        if (zoomToRoute == null) {
          zoomToRoute = false;
        }
        waypoints = [];
        _ref = utils.route.attributes.routes[0].overview_path;
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          point = _ref[_i];
          position = utils.transformLonLat(point.Za, point.Ya);
          waypoints.push(new OpenLayers.Geometry.Point(position.lon, position.lat));
        }
        routeFeature = new OpenLayers.Feature.Vector(new OpenLayers.Geometry.LineString(waypoints), null, utils.routeStyle());
        this.routeLayer.addFeatures([routeFeature]);
        if (zoomToRoute) {
          return this.zoomToExtent(routeFeature.geometry.getBounds());
        }
      },
      clearRoute: function() {
        return this.routeLayer.removeAllFeatures();
      },
      addPOIFeatureToMap: function(poiFeature) {
        return this.poiLayer.addFeatures([poiFeature]);
      },
      clearPOILayer: function() {
        return this.poiLayer.removeAllFeatures();
      },
      setSize: function(width, height) {
        var content;
        content = $("#" + this.mapElement);
        if (this.mapElement === "map") {
          if (!width || !height) {
            height = $(window).height() - 53;
            width = $(window).width();
          }
        } else {
          if (!width || !height) {
            height = $("#" + this.mapElement).height();
            width = $("#" + this.mapElement).width();
          }
        }
        content.height(height);
        return content.width(width);
      },
      addLayer: function(layer) {
        if (this.mapElement === "map") {
          return utils.map.instance.addLayer(layer);
        } else {
          return utils.detailMap.instance.addLayer(layer);
        }
      },
      zoomToExtent: function(bounds) {
        return utils.map.instance.zoomToExtent(bounds);
      },
      zoomIn: function() {
        return utils.map.zoomIn();
      },
      zoomOut: function() {
        return utils.map.zoomOut();
      },
      moveUp: function() {
        return utils.map.pan(0, -256);
      },
      moveDown: function() {
        return utils.map.pan(0, 256);
      },
      moveLeft: function() {
        return utils.map.pan(-256, 0);
      },
      moveRight: function() {
        return utils.map.pan(256, 0);
      }
    });
  });

}).call(this);
