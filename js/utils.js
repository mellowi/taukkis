// Generated by CoffeeScript 1.3.3
(function() {
  var context, defaultStyle;

  utils.transformLonLat = function(lon, lat) {
    var lonLat;
    lonLat = new OpenLayers.LonLat(lon, lat);
    lonLat = lonLat.transform(new OpenLayers.Projection(defaults.projection2), new OpenLayers.Projection(defaults.projection));
    return lonLat;
  };

  utils.routeStyle = function() {
    var routeStyle;
    routeStyle = OpenLayers.Util.extend({}, OpenLayers.Feature.Vector.style['default']);
    routeStyle.strokeColor = "#3f3f2b";
    routeStyle.strokeWidth = 5;
    return routeStyle;
  };

  context = {
    getIconName: function(feature) {
      if (feature.attributes.type) {
        return "" + feature.attributes.type + "-marker";
      } else {
        return "taukkis-marker";
      }
    },
    getLabel: function(feature) {
      if (feature.layer.map.getZoom() > 12 && feature.attributes.title) {
        return feature.attributes.title;
      } else {
        return "";
      }
    }
  };

  defaultStyle = new OpenLayers.Style({
    externalGraphic: "img/${getIconName}.png",
    graphicOpacity: 1,
    pointRadius: 14,
    label: "${getLabel}",
    labelSelect: "true",
    labelAlign: 'cb',
    labelYOffset: 14,
    fontFamily: "Helvetica,Arial,sans-serif",
    fontColor: "#222222",
    labelOutlineColor: "white",
    labelOutlineWidth: 3
  }, {
    context: context
  });

  utils.poiStyleMap = new OpenLayers.StyleMap({
    "default": defaultStyle
  });

  utils.setCategory = function(e) {
    var category, el;
    el = $(e.target);
    category = $(el).data("category");
    utils.filter.addCategoryOut(category);
    utils.filter.save();
    el.toggleClass("out");
    return console.log(category);
  };

  utils.formatTime = function(seconds) {
    var formattedTime, hours, minutes, options;
    options = options || {};
    formattedTime = "";
    minutes = Math.floor((seconds / 60) % 60);
    hours = Math.floor(seconds / (60 * 60));
    if (hours >= 1) {
      formattedTime += hours + "h ";
    }
    if (minutes >= 1) {
      formattedTime += minutes + "min";
    }
    return formattedTime;
  };

  utils.formatDistance = function(distance) {
    return "" + (Math.round(distance)) + " km";
  };

  utils.updateTimer = function() {
    var timeNow;
    timeNow = new Date().getTime();
    return $("[timer]").each(function(i, el) {
      var curTimeStr, prevTimeStr, timer, timerLeft;
      timer = parseInt($(el).attr("timer"));
      if (timer < 60 * 60 * 24 * 30) {
        timer = timeNow + timer * 1000;
        $(el).attr("timer", timer);
      }
      timerLeft = parseInt(timer - timeNow);
      if (timerLeft < 0) {
        $(el).removeAttr("timer");
        if ($(el).is(':visible')) {
          $(el).trigger("timeEnded");
        }
      }
      prevTimeStr = $(el).html();
      curTimeStr = utils.formatTime(timerLeft / 1000);
      if (prevTimeStr !== curTimeStr) {
        return $(el).html(curTimeStr);
      }
    });
  };

  utils.initFail = function() {
    utils.app.navigate("#destination", true, true);
  };

  utils.init = function() {
    if (utils.initialized) {
      return;
    }
    utils.initialized = true;
    $.ajaxSetup({
      statusCode: {
        500: function() {
          return utils.app.navigate("#error?reason=500", true, true);
        },
        501: function() {
          return utils.app.navigate("#error?reason=500", true, true);
        },
        502: function() {
          return utils.app.navigate("#error?reason=500", true, true);
        },
        503: function() {
          return utils.app.navigate("#error?reason=500", true, true);
        }
      }
    });
    $(document).ajaxStart(function() {
      console.log("start ajax");
      return $.mobile.showPageLoadingMsg();
    }).ajaxStop(function() {
      console.log("stop ajax");
      return $.mobile.hidePageLoadingMsg();
    });
    utils.updateTimer();
    setInterval((function() {
      return utils.updateTimer();
    }), 5000);
    return define(["models/route", "collections/locations", "models/filter"], function(Route, Locations, Filter) {
      utils.route = new Route().fetch();
      utils.locations = new Locations().fetch();
      utils.filter = new Filter().fetch();
      if (_.isUndefined(utils.route) || _.isUndefined(utils.locations)) {
        utils.route = null;
        return utils.locations = null;
      }
    });
  };

  utils.init();

}).call(this);
